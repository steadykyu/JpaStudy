package hellojpa;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import java.util.List;

public class JpaMain {
    public static void main(String[] args) {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("hello");

        EntityManager em = emf.createEntityManager();
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        try{
            Team team = new Team();
            team.setName("TeamA");
            em.persist(team);

            Member member = new Member();
            member.setUsername("member1");
//            ------------------------------------단방향 연관관계
            member.setTeam(team);   //단방향 연관관계 설정, 참조 저장
            em.persist(member);
            em.flush();
            em.clear();

            Member findMember = em.find(Member.class, member.getId());
            Team findTeam  = findMember.getTeam();

            System.out.println("findTeam = " + findTeam.getName());
//           // ---------------------------연관관계 수정
//            Team team2 = new Team();
//            team2.setName("TeamB");
//            em.persist(team2);
//            findMember.setTeam(team2);      // 기존의 findMember의 연관관계가 수정된다.
//            Team findTeam2  = findMember.getTeam();
//            System.out.println("findTeam = " + findTeam2.getName());



//          ----------- 객체를 테이블에 맞추어 모델링 ------------
//            member.setTeamId(team.getId());
//            em.persist(member);
//
//            Member findMember = em.find(Member.class, member.getId());  //id=1이 들어가있음
//            Long findTeamId  = findMember.getTeamId();
//
//            Team findTeam = em.find(Team.class, findTeamId);
//            System.out.println(findTeam.getName());


        tx.commit();

        } catch (Exception e){
            tx.rollback();
        } finally{
            em.close();
        }

       emf.close();
    }
}
